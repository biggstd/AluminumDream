"""
################################
Literature NMR Data - Bokeh Demo
################################

This application is divorced from any database. Rather, it
simply loads a set of demo metadata files.

"""

# General imports
# import os
# import sys
# import collections
# import itertools
# import json
# Bokeh imports
from bokeh.layouts import layout, widgetbox
from bokeh.models import ColumnDataSource, Select, HoverTool, TapTool
from bokeh.plotting import figure, curdoc

# isaDream imports.
from isadream.nmr_demo_sa import *

# Simulate the return from a database query.
# Build the investigation object.
invest = build_nmr_output()

# Run the search simulation.
matching_studies = get_studies_by_design_descriptor(invest, al_27_nmr)

# Convert the returned list of studies to pandas dataframes and python
# dictionaries for use in Bokeh's columnDataSource.
data_frame, metadata_dict = build_data_md_pair(matching_studies)

# Get the column names for use in the selectors.
columns = sorted(data_frame.columns)

# Assign the columnDataSources.
source = ColumnDataSource()
# metadata = ColumnDataSource()


def update_data():
    """Upodates the Bokeh ColumnDataSource with subsets of data
    collected from a search result."""

    # Set the X and Y values to those selected by the user.
    source.data = dict(
        x=data_frame[x_selector.value],
        y=data_frame[y_selector.value],
    )

    # Iterate over the entire dataframe generated by the 'search'
    # function, and add all of these generated columns to the
    # Bokeh ColumnDataSource.
    for col in list(data_frame):
        source.add(data=data_frame[col], name=col)


def tap_select_callback(attr, old, new):
    """The callback function for when a user uses the TapTool to
    select a single data point.
    """
    new_index = new['1d']['indices'][0]

    study_key = source.data['study_ID'][new_index]

    print(study_key)

    print(metadata_dict[study_key])


def build_hover_tool():
    """Constructs a Bokeh HoverTool instance based on current selections.
    """
    hover = HoverTool(
        tooltips=[
            ('X, Y', '($x, $y)'),
            ('ppm Al', '@{ppm aluminum}')
        ]
    )
    return hover


def create_figure():
    """
    Create the bokeh plot.
    """
    update_data()

    fig = figure(
        name='primary_figure',
        width=800,
    )

    fig.circle(
        source=source,
        x='x',
        y='y',
    )

    fig.add_tools(build_hover_tool())
    fig.add_tools(TapTool())

    return fig


def update(attr, old, new):
    """
    Define the function to be run upon an update call.
    """
    layout.children[1] = create_figure()
    pass


def callback(event):
    """The callback event to be run upon the selection of a data point.
    """
    pass


# Controls and Selectors ------------------------------------------------------
source.on_change('selected', tap_select_callback)

x_selector = Select(title='X Axis', options=columns, value=columns[0])
x_selector.on_change('value', update)

y_selector = Select(title='Y-Axis', options=columns, value=columns[1])
y_selector.on_change('value', update)

controls = widgetbox([x_selector, y_selector])
layout = layout(
    children=[
        [controls],
        [create_figure()]
    ],
    sizing_mode='fixed'
)

curdoc().add_root(layout)
curdoc().title = "27 Al NMR Crossfilter"
